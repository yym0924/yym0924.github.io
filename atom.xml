<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yym0924.github.io</id>
    <title>yym0924&apos;s blog</title>
    <updated>2019-07-01T02:51:27.301Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yym0924.github.io"/>
    <link rel="self" href="https://yym0924.github.io/atom.xml"/>
    <subtitle>分享也是一种学习</subtitle>
    <logo>https://yym0924.github.io/images/avatar.png</logo>
    <icon>https://yym0924.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, yym0924&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[Gridea 上手教程]]></title>
        <id>https://yym0924.github.io/post/gridea-shang-shou-jiao-cheng</id>
        <link href="https://yym0924.github.io/post/gridea-shang-shou-jiao-cheng">
        </link>
        <updated>2019-06-30T17:03:28.000Z</updated>
        <summary type="html"><![CDATA[<p>使用 Gridea 搭建和管理 GitHub Pages</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用 Gridea 搭建和管理 GitHub Pages</p>
<!-- more -->
<h1 id="本地软件安装">本地软件安装</h1>
<h2 id="git-安装">Git 安装</h2>
<p>Gridea 的同步功能依赖本地 Git 客户端，所以我们需要先安装 Git。
<a href="https://git-scm.com/">Git官网</a>下载平台对应的安装程序。安装没有特别的要求，一路下一步即可。</p>
<h2 id="gridea-安装">Gridea 安装</h2>
<p><a href="https://gridea.dev/">Gridea官网</a>下载对应平台的安装程序进行安装。</p>
<h1 id="初始配置">初始配置</h1>
<h2 id="github-pages-创建">GitHub Pages 创建</h2>
<h3 id="仓库创建">仓库创建</h3>
<p>首先，需要创建一个仓库，建议仓库为 <strong>username.github.io</strong>。根据<a href="https://help.github.com/cn#github-pages-basics">官方文档</a>， GitHub 会默认将名称符合要求的仓库设置成 GitHub Pages 可访问类型。例如我的用户名是 <strong>yym0924</strong>，所以仓库名就是 <strong>yym0924.github.io</strong>。不过我创建仓库的时候并未自动启用 GitHub Pages，遇到这种情况手动开启即可。</p>
<h3 id="基本设置">基本设置</h3>
<h4 id="开通-github-pages">开通 GitHub Pages</h4>
<p>这里也说明下手动启用 GitHub Pages 的方式。
<img src="https://yym0924.github.io/post-images/1561884299925.png" alt="">打开仓库的 <strong>Settings</strong></p>
<p><img src="https://yym0924.github.io/post-images/1561900488026.png" alt="">找到 <strong>GitHub Pages</strong> 设置的地方
点击 <strong>Choose a theme</strong> 随意选择一个主题。因为后续我们使用 Gridea 设置主题，这边选择主题只是为了开启 GitHub Pages 可访问类型。</p>
<h4 id="创建新-token">创建新 token</h4>
<p>Gridea 管理 GitHub Pages 需要 token。登录 GitHub 后点击<a href="https://github.com/settings/tokens/new">这里</a> 创建一个新的 token。
<img src="https://yym0924.github.io/post-images/1561900733349.png" alt="">勾选上 <strong>repo</strong> 相关权限即可。</p>
<p><img src="https://yym0924.github.io/post-images/1561900858791.png" alt="">请把新建的 token 复制一个地方保存起来，因为关闭这个网页后你就再也看不到它了。</p>
<h2 id="gridea-初始配置">Gridea 初始配置</h2>
<p><img src="https://yym0924.github.io/post-images/1561901737634.png" alt="">做好基本设置并保存。这步设置好后就可以开始使用。你可以点击客户端左下角的<strong>预览</strong>按钮来查看本地渲染效果，或者点击<strong>同步</strong>进行博客最新内容的部署。</p>
<h3 id="开启文章评论">开启文章评论</h3>
<p>Gridea 支持 <a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">Gitalk</a> 和 Disqus 两种评论系统，这里我使用 Gitalk 评论系统。</p>
<blockquote>
<p>Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。</p>
</blockquote>
<p>首先你需要有一个 <strong>GitHub OAuth Applicatio</strong> ，点击<a href="https://github.com/settings/applications/new">这里</a>创建。
<img src="https://yym0924.github.io/post-images/1561902572987.png" alt="">
<img src="https://yym0924.github.io/post-images/1561902710190.png" alt="">创建完成后可将 <strong>Client ID</strong> 和 <strong>Client Secret</strong> 复制保存到本地。
<img src="https://yym0924.github.io/post-images/1561903522338.png" alt="">设置、保存并同步后评论模块就可用了。
<img src="https://yym0924.github.io/post-images/1561903957001.png" alt="">首次使用时可能出现上图情况，使用 GitHub 登录一次即可。</p>
<h3 id="favicon-和头像设置">FAVICON 和头像设置</h3>
<p><img src="https://yym0924.github.io/post-images/1561904358927.png" alt="">FAVICON 就是网页标题左侧的小图标</p>
<p><img src="https://yym0924.github.io/post-images/1561904383831.png" alt="">头像</p>
<p>其实这两个不属于初始设置，但是默认使用的是 Gridea 的图标，在你自己的博客里还是很违和的。
<img src="https://yym0924.github.io/post-images/1561904077812.png" alt="">
<img src="https://yym0924.github.io/post-images/1561904084132.png" alt=""></p>
<h3 id="主题设置">主题设置</h3>
<p><img src="https://yym0924.github.io/post-images/1561904932177.png" alt="">基础设置</p>
<p><img src="https://yym0924.github.io/post-images/1561904997628.png" alt="">自定义设置，自由度很大，这里大部分人设置下想要公开的社交网站主页即可。设置后会小图标的形式显示在网页左下角。</p>
<h3 id="菜单设置">菜单设置</h3>
<p>我搭建博客的时候遇到菜单里的<strong>关于</strong>选项链接是 <strong>/about/</strong>，并不能链接自带<strong>关于</strong>文章。所以需要进行修改为 <strong>/post/about/</strong>，你也可以把<strong>关注</strong>选项链接到其他自己新建的文章。
<img src="https://yym0924.github.io/post-images/1561906056439.png" alt=""></p>
<p><img src="https://yym0924.github.io/post-images/1561905339095.png" alt="">点击对应菜单名称即可进入设置</p>
<h1 id="维护-github-pages">维护 GitHub Pages</h1>
<h2 id="设置标签">设置标签</h2>
<p>标签并非必须，但是对于管理和访问而言都能提高效率。
<img src="https://yym0924.github.io/post-images/1561906180285.png" alt="">
<img src="https://yym0924.github.io/post-images/1561906187690.png" alt=""></p>
<h2 id="新建文章">新建文章</h2>
<p><img src="https://yym0924.github.io/post-images/1561907198939.png" alt="">
<img src="https://yym0924.github.io/post-images/1561907241206.png" alt="">
在文章管理界面点击<strong>新建文章</strong>。GitHub Pages 使用 Markdown 编写文章，同时 Gridea 的文章编辑器提供了一些基本样式，点击按钮既可以添加对应标记，方便初学者使用。不过这里还是建议大家抽空学习一下 Markdown，很简单。<a href="https://fehey.com/post/markdown-yu-fa-jian-dan-jiao-cheng/">Markdown 语法简单教程</a></p>
<p>编辑区的右侧可以设置 <strong>URL</strong>、<strong>标签</strong>、<strong>创建时间</strong>、<strong>封面图</strong>和<strong>列表中隐藏</strong>。</p>
<p>这篇文章的 <strong>URL</strong> 为 <strong>gridea-shang-shou-jiao-cheng</strong>，那么他的文章完整链接就是 <a href="https://yym0924.github.io/post/gridea-shang-shou-jiao-cheng/">https://yym0924.github.io/post/gridea-shang-shou-jiao-cheng/</a> 。</p>
<p><strong>标签</strong>可以选择已有的标签，如果需要新标签请先回到主界面添加，再在文章编辑界面选择。</p>
<p><strong>创建时间</strong>会自动生成，也可以修改。</p>
<p><strong>封面图</strong>会显示在首页和其他文章列表（可设置隐藏）。</p>
<p><strong>列表中隐藏</strong>可以用于暂未编辑好的文章，或者不希望它显示于各种列表中而只能通过链接访问，比如<strong>关于</strong>页面。</p>
<p>文章列表默认会显示摘要，在文章头部插入 <!-- more --> ，在其上方写摘要的内容即可。
<img src="https://yym0924.github.io/post-images/1561908525932.png" alt="">
<img src="https://yym0924.github.io/post-images/1561912756115.png" alt=""></p>
<h2 id="预览与同步">预览与同步</h2>
<p><img src="https://yym0924.github.io/post-images/1561907062823.png" alt="">
所有的设置和内容更新要在服务器端生效都需要在<strong>保存</strong>后点击客户端左下角的<strong>同步</strong>。
为了保证不出问题，也可以同步前在本地进行<strong>预览</strong>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于 Jupyter 的 Python 和 R 环境搭建]]></title>
        <id>https://yym0924.github.io/post/ji-yu-jupyter-de-python-he-r-huan-jing-da-jian</id>
        <link href="https://yym0924.github.io/post/ji-yu-jupyter-de-python-he-r-huan-jing-da-jian">
        </link>
        <updated>2019-06-28T06:31:57.000Z</updated>
        <summary type="html"><![CDATA[<p>基于 Jupyter 搭建一个 Python 和 R 语言的开发环境</p>
]]></summary>
        <content type="html"><![CDATA[<p>基于 Jupyter 搭建一个 Python 和 R 语言的开发环境</p>
<!-- more -->
<h1 id="简介">简介</h1>
<p>Jupyter是个支持多语言的开源交互式开发环境，便于分步执行和显示结果，也十分利于展示。在数据分析、机器学习和教学等领域有着广泛的应用。而作为生物信息学的研究者，我们主要通过基于网页的Jupyter Notebook使用Python和R进行工作。
由于其基于网页的特性，可以方便地在本机浏览器中使用子系统和远程服务器上的Python和R环境。</p>
<p><img src="https://yym0924.github.io/post-images/1561704039434.png" alt="">
<img src="https://yym0924.github.io/post-images/1561704064628.png" alt="">
本文主要介绍Jupyter Notebook的安装和R环境的搭建（Jupyter自带对Python的支持），以及子系统和远程服务器上的Jupyter Notebook上的使用方法。
接下来的整个部署过程全部基于非Root权限，以便于没有服务器Root权限的朋友使用。</p>
<h2 id="jupyter本体安装">Jupyter本体安装</h2>
<p>使用以下命令安装Jupyter本体（虽然使用pip命令也可以安装，但是为了后续数据分析的包管理方便，强烈建议转换到Anaconda上）</p>
<pre><code>conda install jupyter
</code></pre>
<p><img src="https://yym0924.github.io/post-images/1561704479996.png" alt="">
conda会自动列出一系列需要一起安装的包，输入“y”后回车即可。
<img src="https://yym0924.github.io/post-images/1561704506178.png" alt=""></p>
<h2 id="irkernel的安装与激活">IRkernel的安装与激活</h2>
<h3 id="所需依赖包的安装">所需依赖包的安装</h3>
<p>进入R交互模式，使用以下命令安装相关依赖包。</p>
<pre><code>install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
</code></pre>
<p>有时候部分包会安装失败，直接用命令重新安装一遍即可。
<img src="https://yym0924.github.io/post-images/1561704847680.png" alt="">
个人测试的时候遇到两个包报错，重新安装后成功。即使再次失败，单独再次安装也可以更清晰地看到报错信息，以方便排错。</p>
<h3 id="irkernel本体的安装与激活">IRkernel本体的安装与激活</h3>
<p>使用以下命令在R交互模式中安装IRkernel。</p>
<pre><code>devtools::install_github('IRkernel/IRkernel')
</code></pre>
<p>安装完成后再用以下命令激活IRkernel</p>
<pre><code>IRkernel::installspec()
</code></pre>
<p><img src="https://yym0924.github.io/post-images/1561705298350.png" alt="">
有时候会出现类似上图中的警告信息，可以不用在意</p>
<h1 id="使用">使用</h1>
<h2 id="windows系统openssh安装">Windows系统OpenSSH安装</h2>
<p>SSH命令可以用来在终端下远程登陆服务器。Linux、Mac OS自带SSH命令。Windows 10最新版中自带SSH命令，但并未启用。除了Windows 10最新版外，其他版本的Windows系统并没有自带SSH。（**注：**如果仅仅是想在本地使用Jupyter，可以跳过这个部分）</p>
<h3 id="非windows-10系统的openssh安装">非Windows 10系统的OpenSSH安装</h3>
<p>通过下面的网址进入OpenSSH for Windows的下载地址</p>
<pre><code>https://github.com/PowerShell/Win32-OpenSSH/releases
</code></pre>
<p><img src="https://yym0924.github.io/post-images/1561705460762.png" alt=""></p>
<p>根据本地电脑操作系统的位数选择对应的包。32位系统下载OpenSSH-Win32.zip，64位系统下载OpenSSH-Win64.zip。
下载完成后将压缩包解压到一个合适的位置。
<img src="https://yym0924.github.io/post-images/1561705959220.png" alt=""></p>
<p>记下地址，例如上图中的地址就是</p>
<pre><code>D:\Program Files\OpenSSH-Win64
</code></pre>
<p>右击“计算机”，选择属性。在弹出窗口中选择“高级系统设置”
<img src="https://yym0924.github.io/post-images/1561706365722.png" alt="">
在“系统属性”窗口中选择“高级”选项卡，点击“环境变量”按钮。
<img src="https://yym0924.github.io/post-images/1561706414978.png" alt="">
在“环境变量”窗口中选中“用户变量”中的Path，然后点击“编辑”按钮。
<img src="https://yym0924.github.io/post-images/1561706590105.png" alt="">
在“编辑环境变量”窗口中点击“新建”按钮
<img src="https://yym0924.github.io/post-images/1561706761115.png" alt="">
在新的输入框里输入刚才OpenSSH的目录（这里就是“D:\Program Files\OpenSSH-Win64”），然后按确定。之后在“环境变量”窗口、“系统属性”窗口中都记得按下“确定”按钮。在新打开的终端中就可以使用ssh命令了。
<img src="https://yym0924.github.io/post-images/1561706781617.png" alt=""></p>
<h3 id="windows-10系统的openssh启用">Windows 10系统的OpenSSH启用</h3>
<p>在最新版的Windows 10系统里已经内置了OpenSSH客户端，但是默认是不启用的。所以需要手动开启。
首先，先确认已经升级到最新版的Windows 10。然后在任务栏搜索框输入“可选功能”，搜索结果中选择“管理可选功能”。
<img src="https://yym0924.github.io/post-images/1561706808221.png" alt="">
查看是否有“OpenSSH客户端”，如果有，恭喜你，直接就可以在终端中使用ssh命令了。如果没有则点击“添加功能”。
<img src="https://yym0924.github.io/post-images/1561706818181.png" alt="">
选中“OpenSSH客户端”选择“安装”
<img src="https://yym0924.github.io/post-images/1561706829047.png" alt=""></p>
<p>一会儿安装完毕后就可以在新打开的终端中使用ssh命令了。</p>
<h2 id="远程端口映射">远程端口映射</h2>
<p>Jupyter Notebook支持的是本地使用，但是我们可以通过ssh进行远程端口映射。（**注：**如果只是希望使用本地系统或者是子系统中的Jupyter，跳过这步）
打开本地电脑的终端，使用以下命令进行远程端口映射：</p>
<pre><code>ssh username@serverip -L 127.0.0.1:1234:127.0.0.1:8888
</code></pre>
<p>这个时候终端会提示你输入密码，输入即可。</p>
<h2 id="启动jupyter-notebook">启动Jupyter Notebook</h2>
<h3 id="启动jupyter-notebook服务">启动Jupyter Notebook服务</h3>
<p>先在远程终端中使用以下命令启动相关服务（**注1：**如果是本地使用，则在本地终端中输入下面命令，会自动呼出相应页面。**注2：**如果是使用子系统中的Jupyter，除了要输入下面命令启动Jupyter Notebook服务外，还需要手动打开Jupyter Notebook页面。）</p>
<pre><code>jupyter notebook
</code></pre>
<p>之后会有一系列提示，可能会包括“找不到网页浏览器”，不用在意，服务本身可以启动即可。记下“=”后面的那一串字母数字（令牌）。
<img src="https://yym0924.github.io/post-images/1561708287934.png" alt=""></p>
<h3 id="本地浏览器打开jupyter-notebook">本地浏览器打开Jupyter Notebook</h3>
<p>由于之前已经把远程端口映射到本地了，所以直接在本地的浏览器地址栏中输入以下地址即可。</p>
<pre><code>127.0.0.1:1234
</code></pre>
<p>如果是使用本地系统中的Jupyter，在本地终端启动Jupyter后会自动弹出页面。
子系统中的Jupyter在启动后需要手动在浏览器地址栏输入下面的地址启动。</p>
<pre><code>127.0.0.1:8888
</code></pre>
<p>如果你是首次连接，会到一个下面这样一个登陆界面，输入刚才记下的令牌就可以登录
<img src="https://yym0924.github.io/post-images/1561708346019.png" alt="">
<img src="https://yym0924.github.io/post-images/1561708374435.png" alt="">
进入Jupyter Notebook页面后在点击右上角“New”按钮即可新建基于R或者Python的新Notebook。
<img src="https://yym0924.github.io/post-images/1561708397097.png" alt="">
<img src="https://yym0924.github.io/post-images/1561708405355.png" alt="">
这就可以开始使用了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World!]]></title>
        <id>https://yym0924.github.io/post/hello-world</id>
        <link href="https://yym0924.github.io/post/hello-world">
        </link>
        <updated>2019-06-26T08:08:14.000Z</updated>
        <summary type="html"><![CDATA[<p>正式开始搭建自己的博客❤😀</p>
]]></summary>
        <content type="html"><![CDATA[<p>正式开始搭建自己的博客❤😀</p>
<!-- more -->
<p>正式开始搭建自己的博客❤😀</p>
]]></content>
    </entry>
</feed>